#include <iostream>
#include <fstream>
#include <random>
#include <list>
#include <vector>
#include "generate_config.h"
using namespace std;



int main() {
	
	// Declare random number engine that will be used to generate independent, uniformly random values that will be fed into the appropriate distributions
	// Seed it with a non-deterministic random value generated by random_device
	default_random_engine engine(random_device{}());

	// From user input, obtain grid size, average demand, number of parking lots, info about parking lot capacities, number of destinations, and whether destinations probabilities are equal or random
		
	int gridSize = getGridSize();
	int avgDemand = getAvgDemand();
	
	int numLots = getNumLots();
	bool randCapacIn = randCapac();
	int capac = 0;
	if (!randCapacIn) {
		capac = getLotCapac();
	}
	bool randPriceIn = randPrice();
	double price = 0.0;
	if (!randPriceIn) {
		price = getLotPrice();
	}
	
	int numDests = getNumDests();
	bool randDestProbsIn = randDestProbs();

	// Declare output stream "config" that will write to a file called "config.txt"
	// Note: If "config.txt" does not already exist in the present working directory, it will be created automatically. Otherwise, it will be written over.
	ofstream config;
	config.open("config.txt");

	// Write grid size to config.txt
	config << "\nGrid Size:\n" << gridSize << "\n\n";

	// Write number of destinations to config.txt
	config << "Destination Count:\n" << numDests << "\n\n";

	// Write random destination locations to config.txt
	writeDestLocs(gridSize, numDests, config, engine);

	// Write destination probabilities (probability that a driver will choose that destination) to config.txt and return the probabilities in a list
	list<double> destProbs = writeDestProbs(randDestProbsIn, numDests, config, engine);
	
	// Write random destination average durations to config.txt
	vector<double> avgDurations = writeDestAvgDurs(numDests, config, engine);

	// Write number of lots to config.txt
	config << "Lot Count:\n" << numLots << "\n\n";
	
	// Write random parking lot locations to config.txt
	writeLotLocs(gridSize, numLots, config, engine);

	// Write random parking lot capacities to config.txt
	writeLotCapacities(randCapacIn, capac, avgDemand, numLots, config, engine);

	// Write random parking lot prices to config.txt
	writeLotPrices(randPriceIn, price, numLots, config, engine);

	// Write average demand to config.txt
	config << "Average Demand:\n" << avgDemand << "\n\n";

	// Write driver arrival times to config.txt
	int numDrivers = writeDriverArrivals(avgDemand, config, engine);

	// Write number of drivers to config.txt
	config << "Driver Count:\n" << numDrivers << "\n\n";

	// Write random driver arrival locations to config.txt
	writeDriverLocs(gridSize, numDrivers, config, engine);

	// Write random driver destinations to config.txt
	list<int> dests = writeDriverDests(destProbs, numDrivers, config, engine);

	// Write random driver durations to config.txt
	writeDriverDurs(avgDurations, dests, config, engine);

	// Write random driver max walking distances to config.txt
	writeDriverMaxWalkDists(gridSize, numDrivers, config, engine);

	// Write random driver max prices to config.txt
	writeDriverMaxPrices(numDrivers, config, engine);

	// Write random driver importance weight to config.txt
	writeDriverImportWeights(numDrivers, config, engine);

	// Close output file stream
	config.close();

	return 0;
}


