#include <iostream>
#include <fstream>
#include <random>
#include <list>
#include <vector>
#include "generate_config.h"
using namespace std;



int main() {
	
	// Declare random number engine that will be used to generate independent, uniformly random values that will be fed into the appropriate distributions
	// Seed it with a non-deterministic random value generated by random_device
	default_random_engine engine(random_device{}());

	// Prompt user to input information

	// Get number of simulation iterations from user input
	int numIterations = getNumIterations();

	// Get grid size from user input
	int gridSize = getGridSize();

	// Get average demand from user input
	int avgDemand = getAvgDemand();
	
	// Get number of parking lots from user input
	int numLots = getNumLots();

	// Get whether lot capacities should be random or equal from user input
	bool randCapacIn = randCapac();
	
	// If user indicates that capacities should be equal, get capcacity from user input
	int capac = 0;
	if (!randCapacIn) {
		capac = getLotCapac();
	}

	// Get pricing policy from user input
	int pricePolicy = getPricePolicy();
	
	// If price policy 1 or 3 is chosen, get initial lot price from user input
	double price = 0;
	if ((pricePolicy == 1) || (pricePolicy == 3)) {
		price = getLotPrice();
	}
	
	// Get number of destinations from user input
	int numDests = getNumDests();

	// Get whether destination probabilities (prob. that each destination is chosen) should be random or equal from user input
	bool randDestProbsIn = randDestProbs();

	// Declare output stream "config" that will write to a file called "config.txt"
	// Note: If "config.txt" does not already exist in the present working directory, it will be created automatically. Otherwise, it will be written over.
	ofstream config;
	config.open("config.txt");

	// Write number of iterations to config.txt
	config << "****************************************************************************************************\n";
	config << "NUMBER OF ITERATIONS:\n";
	config << "During each iteration, a new set of drivers with random attributes will be generated.\n";
	config << "The grid, lot, and destination attributes will remain the same throughout all iterations.\n";
	config << "****************************************************************************************************\n";
	config << numIterations << "\n\n";

	// Write grid size to config.txt
	config << "****************************************************************************************************\n";
	config << "GRID SIZE:\n";
	config << "The grid represents a 2-D, square, Cartesian space, with its lower left corner at (0, 0).\n";
	config << "The grid size is a positive integer value representing the maximum x and y-coordinates.\n";
	config << "****************************************************************************************************\n";
	config << gridSize << "\n\n";

	// Write number of destinations to config.txt
	config << "****************************************************************************************************\n";
	config << "DESTINATION COUNT:\n";
	config << "Total number of destinations on the grid.\n";
	config << "****************************************************************************************************\n";
	config << numDests << "\n\n";

	// Write random destination locations to config.txt
	writeDestLocs(gridSize, numDests, config, engine);

	// Write destination probabilities (probability that a driver will choose that destination) to config.txt and return the probabilities in a list
	list<double> destProbs = writeDestProbs(randDestProbsIn, numDests, config, engine);
	
	// Write random destination average durations to config.txt
	vector<double> avgDurations = writeDestAvgDurs(numDests, config, engine);

	// Write number of lots to config.txt
	config << "****************************************************************************************************\n";
	config << "LOT COUNT:\n";
	config << "Total number of parking lots on the grid.\n";
	config << "****************************************************************************************************\n";
	config << numLots << "\n\n";
	
	// Write random parking lot locations to config.txt
	writeLotLocs(gridSize, numLots, config, engine);

	// Write random parking lot capacities to config.txt
	writeLotCapacities(randCapacIn, capac, avgDemand, numLots, config, engine);

	// Write the pricing policy to config.txt
	writePricePolicy(pricePolicy, config);

	// Write random parking lot prices to config.txt
	writeLotPrices(pricePolicy, price, numLots, config, engine);

	// Write average demand to config.txt
	config << "****************************************************************************************************\n";
	config << "AVERAGE DEMAND:\n";
	config << "Average number of drivers that arrive per simulation iteration.\n";
	config << "****************************************************************************************************\n";
	config << avgDemand << "\n\n";

	// Write number of drivers to config.txt
	writeNumDrivers(numDrivers, config);
	
	// Write driver arrival times to config.txt
	list<int> numDrivers = writeDriverArrivals(numIterations, avgDemand, config, engine);

	// Write random driver arrival locations to config.txt
	writeDriverLocs(gridSize, numDrivers, config, engine);

	// Write random driver destinations to config.txt
	list<list<int>> dests = writeDriverDests(destProbs, numDrivers, config, engine);

	// Write random driver durations to config.txt
	writeDriverDurs(avgDurations, dests, config, engine);

	// Write random driver max walking distances to config.txt
	writeDriverMaxWalkDists(gridSize, numDrivers, config, engine);

	// Write random driver max prices to config.txt
	writeDriverMaxPrices(numDrivers, config, engine);

	// Write random driver importance weight to config.txt
	writeDriverImportWeights(numDrivers, config, engine);

	// Close output file stream
	config.close();

	return 0;
}


